from xml.dom.expatbuilder import parseString
from gpiozero.pins.pigpio import PiGPIOFactory
from gpiozero import AngularServo
import RPi.GPIO as GPIO

from camera import camera
import numpy as np
import threading
import time
import cv2

cam = camera()
pigpio_factory = PiGPIOFactory()

sL, sR, bt = 10, 9, 24
in1, in2, en = 19, 16, 13
GPIO.setmode(GPIO.BCM)
GPIO.setup(sL, GPIO.IN) # Sensor left
GPIO.setup(sR, GPIO.IN) # Sensor right
GPIO.setup(bt, GPIO.IN, pull_up_down=GPIO.PUD_UP) # button
GPIO.setup(in1, GPIO.OUT) # In 1
GPIO.setup(in2, GPIO.OUT) # In 2
GPIO.setup(en, GPIO.OUT) # En

motor = GPIO.PWM(en, 1000)
motor.start(0) 
servo = AngularServo(7, min_angle=0, max_angle=180, min_pulse_width=0.0005, max_pulse_width=0.0025, pin_factory=pigpio_factory)

# Lines
lowerBL = np.array([108,169,48])
upperBL = np.array([117,255,140])
lowerOR = np.array([0,142,121])
upperOR = np.array([12,255,255])

# Blocks
lowerGR = np.array([0,255,58])
upperGR = np.array([179,255,255])
lowerRD = np.array([142,172,0])
upperRD = np.array([179,255,255])

def drive(speed = 0, angle = 90, direction = 0):
    if speed == 0 or direction == 0: # No movement
        GPIO.output(in1, GPIO.LOW)
        GPIO.output(in2, GPIO.LOW)
        time.sleep(0.5)

    if speed > 100:
        speed = 100
    elif speed < 0:
        speed = 0

    if angle > 135:
        angle = 135
    elif angle < 45:
        angle = 45

    motor.ChangeDutyCycle(speed)
    servo.angle = angle
    if direction > 0: # Forward
        GPIO.output(in1, GPIO.LOW)
        GPIO.output(in2, GPIO.HIGH)
    elif direction < 0: # Backward
        GPIO.output(in1, GPIO.HIGH)
        GPIO.output(in2, GPIO.LOW)

def sensorDetect():
    # Sensor inputs
    sensorL = GPIO.input(sL)    
    sensorR = GPIO.input(sR) 

    if sensorL and not sensorR: # 01
        drive(30, 50, 1) # right
    elif not sensorL and sensorR: # 10
        drive(30, 130, 1) # left
    else:
        return False
    time.sleep(0.02)
    drive(40, 90, 1)
    return True

def turnTimer(times, dArgs=[0, 102, 0]):
    timeS = time.time()
    while time.time() - timeS < times:
        # Turning
        drive(*dArgs)
            
        #if sensorDetect():
        #    break

def findContour(mask, times, setArea=100, name='something'):
    x, y, w, h = 0, 0, 0, 0
    contours, hierarchy = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for pic, contour in enumerate(contours):
        area = cv2.contourArea(contour) 
        if area >= setArea:
            x, y, w, h = cv2.boundingRect(contour)
            print(f'~~~\nFound {name}!\nX: {x}, Y: {y}, W: {w}, H: {h}, Area: {area}\n~~~')
            break
    
    return x, y, w, h

def block():
    vs = threading.Thread(target=cam.update, daemon=True)
    vs.start()  
    time.sleep(1)
    drive(0, 90, 0)
    numLine = 0
    while True:
        ret, frame = cam.get()
        if not ret:
            continue
    
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        crop = hsv[:, 300:340]
        maskBL = cv2.inRange(crop, lowerBL, upperBL)
        maskOR = cv2.inRange(hsv, lowerOR, upperOR)
        maskGR = cv2.inRange(hsv, lowerGR, upperGR) 
        maskRD = cv2.inRange(hsv, lowerRD, upperRD) 
        
        #bx, by, bw, bh = findContour(maskBL, 0, 200, 'BL')
        #ox, oy, ow, oh = findContour(maskOR, 0, 100, 'OR')
        gx, gy, gw, gh = findContour(maskGR, 0, 50, 'GR')
        #rx, ry, rw, rh = findContour(maskRD, 0, 500, 'RD')
        time.sleep(0.01)
        

try:
    block()
except KeyboardInterrupt:
    pass
    #cv2.imwrite('a.jpg', frame)
except Exception as e:
    print(e)

#print(f'[INFO] Total time: {time.time() - timeSince:.2f}s')
drive(0, 90, 0) # Forward center
GPIO.cleanup()
cam.shutdown()